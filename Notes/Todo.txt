  Amaçlarımız :
* Tasarım panel :  
       : Kullanıcılar Giriş için giriş paneli
       : Kullanıcılar için Ana Sayfa 

* Backend Kısmı :
      : Kullanıcıdan alınan şirket isminin güncel değeri döndürmesi, ve sektörü
      : Kullanıcdan alınan ismin tahmin algoritmasnında bulunan değeri
      : Tahmin algoritmanında bulunan değerin doğruluk oranı döndürülmesi
      : Anlık verilerin çekilmesi



* Veritabanı kısmı :
       : Veritabanında bulunan eksik verillerin tamamlanması
       : Veritabanında kullanılacak tabloların yapılması


Adım 1: Veri Toplama ve Güncelleme

Canlı Borsa verilerini düzenli aralıklarla çekmek için bir veri kaynağı API'si kullanabilirsiniz. Örneğin, "yfinance" veya başka bir finans API'si tercih edilebilir.
Verileri güncellemek için zamanlayıcı (scheduler) kullanabilirsiniz. Örneğin, Python'da bulunan "APScheduler" kütüphanesi güncelleme işlemini düzenlemek için uygun bir seçenek olabilir.

Adım 2: Veri Ön İşleme ve Depolama

Çekilen Borsa verilerini uygun şekilde ön işleme yaparak bir veritabanında (örn. MongoDB) saklayabilirsiniz.
Verileri depolama sırasında gerektiğinde temizleme, dönüştürme ve eksik değerleri doldurma işlemlerini gerçekleştirebilirsiniz.

Adım 3: Makine Öğrenmesi Modeli Geliştirme

Verileri kullanarak uygun makine öğrenmesi modelini (örn. Rastgele Ormanlar, LSTM) geliştirin.
Modelinizi eğitmek için geçmiş verileri kullanabilirsiniz. Eğitim için veri kümesini test ve eğitim alt kümelere ayırarak overfitting'i önlemeye çalışın.
Model performansını değerlendirmek için uygun hata metriklerini kullanın (örn. ortalama karesel hata, r-kare değeri).

Adım 4: Kullanıcı Girişleri ve Endeksler

Kullanıcıların tahmin yapılmasını istediği endeksler ve girişleri almak için bir web arayüzü oluşturun.
Django tarafından sunulan form öğeleri veya text inputlar kullanarak kullanıcı girişlerini alabilirsiniz.
Endeks seçeneklerini kullanıcıya sunmak için bir seçim listesi (dropdown list) oluşturabilirsiniz.

Adım 5: Tahmin Yapma ve Sonuçları Görselleştirme

Kullanıcı girişlerini makine öğrenmesi modeline vererek tahmin yapın.
Sonuçları kullanıcıya görselleştirmek için grafikler veya tablolar kullanabilirsiniz. Örneğin, tahmin edilen fiyatları grafiklerle göstermek kullanıcılara daha anlaşılır bir şekilde sunabilir.

Adım 6: Sonuçları Sunma

Tahmin sonuçlarını kullanıcıya sunmak için bir web arayüzü oluşturun.
Django templates kullanarak, tahmin sonuçlarını görselleştirilen grafikler ve tablolarla birlikte web sayfasında gösterin.

Adım 7: Canlı Veri Güncellemesi ve Otomatik Tahmin

Verileri düzenli olarak güncelleyerek canlı verilere ulaşmaya devam edin.
Otomatik tahmin işlemleri için zamanlayıcı (scheduler) kullanarak periyodik olarak tahminleri güncelleyin ve verileri kullanıcıya sunun.

Adım 8: Kullanıcı Geri Bildirimi ve İyileştirme

Kullanıcıların geri bildirimlerini alarak sistemi sürekli olarak iyileştirebilirsiniz. Örneğin, kullanıcıların istediği yeni özellikleri ekleyebilir veya tahmin performansını artırmak için yeni modeller deneyebilirsiniz.


